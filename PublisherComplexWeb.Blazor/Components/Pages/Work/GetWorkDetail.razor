@page "/GetWorkDetail/{Id}"

<PageTitle>WorkDetail</PageTitle>

@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

@inject IHttpClientFactory clientFactory

<h2>Детали работы</h2>

<table class="table table-sm table-striped table-bordered m-2">
    <thead>
        <tr>
            <th>Id</th>
            <th>OrderId</th>
            <th>TypeWorkTitle</th>
            <th>MaterialTitle</th>
            <th>DeviceTitle</th>
            <th>DoublePrint</th>
            <th>FormatTitle</th>
            <th>Quantity</th>
            <th>StatusWork</th>          
        </tr>
    </thead>
    <tbody>
        <tr>

            <td>@work.Id</td>
            <td>@work.OrderId</td>
            <td>@work.TypeWorkTitle</td>
            <td>@work.MaterialTitle</td>
            <td>@work.DeviceTitle</td>
            <td>@work.DoublePrint</td>
            <td>@work.FormatTitle</td>
            <td>@work.Quantity</td>
            @* <td>@work.StatusWork</td> *@
        </tr>
    </tbody>
</table>

@code {
    private HttpClient httpClient = null;

    private Work work = new Work();

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7101/api/work/workDetail");

        await GetDetail();
    }

    private async Task GetDetail()
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{httpClient.BaseAddress}/{Id}");
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        work = data.ToObject<Work>();
    }
}
