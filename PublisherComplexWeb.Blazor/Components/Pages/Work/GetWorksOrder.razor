@page "/GetWorksOrder/{orderId}"

<PageTitle>Works Order</PageTitle>

@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

@inject IHttpClientFactory clientFactory

<h2>Работы к заказу: @orderId</h2>

<h3>Количество работ: @works.Count </h3>

@if (works.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm table-striped table-bordered m-2">
        <thead>
            <tr>
                <th>Id</th>
                <th>OrderId</th>
                <th>TypeWorkTitle</th>
                <th>MaterialTitle</th>
                <th>DeviceTitle</th>
                <th>DoublePrint</th>
                <th>FormatTitle</th>
                <th>Quantity</th>
                <th>StatusWork</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in works)
            {
                <tr>
                    <td>
                        <NavLink href="@($"GetWorkDetail/{item.Id}")">@item.Id</NavLink>
                    </td>

                    <td>@item.OrderId</td>
                    <td>@item.TypeWorkTitle</td>
                    <td>@item.MaterialTitle</td>
                    <td>@item.DeviceTitle</td>
                    <td>@item.DoublePrint</td>
                    <td>@item.FormatTitle</td>
                    <td>@item.Quantity</td>
                    <td>@item.StatusWork</td>

                    <NavLink href="@($"UpdateWork/{item.Id}")">Изменить</NavLink>
                    <button @onclick="@(async ()=> await Delete(item.Id))">Удалить</button>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HttpClient httpClient = null;

    private List<Work> works = new List<Work>();

    [Parameter]
    public string orderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7101/api/work");

        await Get();
    }

    private async Task Get()
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{httpClient.BaseAddress}/{orderId}");
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        if (data != null)
        {
            works = data.ToObject<List<Work>>();
        }
    }

    private async Task Delete(int id)
    {
        HttpResponseMessage response = await httpClient.DeleteAsync($"{httpClient.BaseAddress}/{id}");

        await Get();
    }
}