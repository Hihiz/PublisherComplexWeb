@page "/Account/Login"

@layout AuthLayout

@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

@inject IHttpClientFactory clientFactory
@inject NavigationManager navigationManager

<PageTitle>Login</PageTitle>

<div class="card-header pt-4 pb-4 text-center bg-primary">
    <span><img src="Images/logo.png" alt="" height="60"></span>
</div>

<div class="card-body p-4">

    <div class="text-center w-75 m-auto">
        <h4 class="text-dark-50 text-center mt-0 fw-bold">Вход</h4>
        <p class="text-muted mb-4">Введите свой адрес электронной почты и пароль для доступа к сайту.</p>
    </div>

    <form>
        <div class="text-danger"></div>
        <div class="mb-3">
            <a href="@($"Account/Login")" class="text-muted float-end"><small>Забыли пароль?</small></a>
            <label class="form-label">Password</label>
            <input @bind-value="login.Password" type="password" class="form-control" placeholder="Введите свой пароль" required>
        </div>

        <div class="mb-3 mb-3">
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="checkbox-signin" checked>
                <label class="form-check-label" for="checkbox-signin">Remember me</label>
            </div>
        </div>

        @if (statusMessage != null)
        {
            <div class="alert-danger mb-1">
                @statusMessage
            </div>
        }

        <div class="row mt-3">
            <div class="col-12 text-center">
                <p class="text-muted">У вас нет учетной записи?  <a href="@($"Account/Register")" class="text-muted ms-1"><b>Регистрация</b></a></p>
            </div> <!-- end col-->
        </div>
    </form>

</div> <!-- end card-body -->
@code {
    private HttpClient httpClient = null;
    private LoginModel login = new LoginModel();
    private string statusMessage = null;

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7101/api/account/login");
    }

    private async Task Submit()
    {
        StatusAuthResponse statusResponse = new StatusAuthResponse();

        HttpResponseMessage response = await httpClient.PostAsJsonAsync($"{httpClient.BaseAddress}", login);
        string apiResponse = await response.Content.ReadAsStringAsync();

        statusResponse = JsonConvert.DeserializeObject<StatusAuthResponse>(apiResponse);

        if (statusResponse.StatusCode != 200)
        {
            statusMessage = statusResponse.Message;
            StateHasChanged();
        }
    }
}
