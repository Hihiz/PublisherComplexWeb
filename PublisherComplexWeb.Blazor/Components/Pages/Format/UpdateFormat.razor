@page "/UpdateFormat/{Id}"

@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

@inject IHttpClientFactory clientFactory
@inject NavigationManager navigationManager

<PageTitle>Update Format</PageTitle>

<h2>Редактирование формата</h2>

<table>
    <div class="form-group">
        <p>
            <label class="control-label">Id</label>
            <input class="form-control" readonly="readonly" @bind-value="format.Id" />
        </p>
        <p>
            <label class="control-label">Title</label>
            <input class="form-control" @bind-value="format.Title" />
        </p>

        <p>
            <button class="btn btn-success" @onclick="Submit">Сохранить</button>
        </p>
    </div>
</table>

@code {
    private HttpClient httpClient = null;

    private Format format = new Format();

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7101/api/format");

        await GetFormatDetail(int.Parse(Id));
    }

    private async Task GetFormatDetail(int id)
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{httpClient.BaseAddress}/{id}");
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        if (data != null)
        {
            format = data.ToObject<Format>();
        }
    }

    private async Task Submit()
    {
        HttpResponseMessage response = await httpClient.PutAsJsonAsync($"{httpClient.BaseAddress}/{format.Id}", format);
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        format = data.ToObject<Format>();

        navigationManager.NavigateTo("GetFormats");
    }
}