@page "/UpdateMaterial/{Id}"

@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

@inject IHttpClientFactory clientFactory
@inject NavigationManager navigationManager

<PageTitle>Update Material</PageTitle>

<h2>Редактирование материала</h2>

<table>
    <div class="form-group">
        <p>
            <label class="control-label">Id</label>
            <input class="form-control" readonly="readonly" @bind-value="material.Id" />
        </p>
        <p>
            <label class="control-label">Title</label>
            <input class="form-control" @bind-value="material.Title" />
        </p>
        <p>
            <label class="control-label">Device Id</label>

            <select class="form-control" @bind="@selectedDevice">
                @foreach (var device in devices)
                {
                    <option value="@device.Id">@device.Title</option>
                }
            </select>
        </p>

        <p>
            <button class="btn btn-success" @onclick="Submit">Сохранить</button>
        </p>
    </div>
</table>

@code {
    private HttpClient httpClient = null;

    private int selectedDevice = 0;
    private List<Device> devices = new List<Device>();

    private Material material = new Material();

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7101/api/material");

        await GetMaterialDetail(int.Parse(Id));
        await LoadDevices();
    }

    private async Task GetMaterialDetail(int id)
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{httpClient.BaseAddress}/{id}");
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        if (data != null)
        {
            material = data.ToObject<Material>();

            selectedDevice = material.DeviceId;
        }
    }

    private async Task LoadDevices()
    {
        HttpResponseMessage response = await httpClient.GetAsync($"https://localhost:7101/api/device");
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        devices = data.ToObject<List<Device>>();        
    }

    private async Task Submit()
    {
        material.DeviceId = selectedDevice;

        HttpResponseMessage response = await httpClient.PutAsJsonAsync($"{httpClient.BaseAddress}/{material.Id}", material);
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        material = data.ToObject<Material>();

        navigationManager.NavigateTo("GetMaterials");
    }
}