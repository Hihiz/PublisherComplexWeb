@page "/GetOrdersOpen"

<PageTitle>OrderOpen</PageTitle>

@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

@inject IHttpClientFactory clientFactory

<h2>Открытые заказы</h2>

<h3>Количество открытых заказов: @orders.Count </h3>

@if (orders.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm table-striped table-bordered m-2">

        <thead>
            <tr>
                <th class="all" style="width: 20px;">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="customCheck1">
                        <label class="form-check-label" for="customCheck1">&nbsp;</label>
                    </div>
                </th>
                <th>Id</th>
                <th>UserId</th>
                <th>FIO</th>
                <th>ShortDescription</th>
                <th>DetailedDescription</th>
                <th>CreatedAt</th>
                <th>DateEnd</th>
                <th>StatusOrder</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in orders)
            {
                <tr>
                    <td>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="customcheck2">
                            <label class="form-check-label" for="customcheck2">&nbsp;</label>
                        </div>
                    </td>

                    <td>
                        <NavLink href="@($"GetOrderDetail/{item.Id}")">@item.Id</NavLink>
                    </td>

                    <td>@item.UserId</td>
                    <td>@item.UserFio</td>
                    <td>@item.ShortDescription</td>
                    <td>@item.DetailedDescription</td>
                    <td>@item.CreatedAt</td>
                    <td>@item.DateEnd</td>
                    <td>@item.StatusOrder</td>

                    <NavLink href="@($"UpdateOrder/{item.Id}")">Изменить</NavLink>
                    <button @onclick="@(async ()=> await Delete(item.Id))">Удалить</button>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HttpClient httpClient = null;

    private List<Order> orders = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7101/api/order");

        await Get();
    }

    private async Task Get()
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{httpClient.BaseAddress}/orderOpen");
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        orders = data.ToObject<List<Order>>();
    }

    private async Task Delete(int id)
    {
        HttpResponseMessage response = await httpClient.DeleteAsync($"{httpClient.BaseAddress}/{id}");

        await Get();
    }
}
