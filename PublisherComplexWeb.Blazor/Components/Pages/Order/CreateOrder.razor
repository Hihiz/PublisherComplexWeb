@page "/CreateOrder"
@using Newtonsoft.Json

@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

@inject IHttpClientFactory clientFactory
@inject NavigationManager navigationManager

<PageTitle>Create Order</PageTitle>

<h2>Создание заказа</h2>

<table>
    <div class="form-group">
        <p>
            <lable class="control-label">User</lable>
            <select class="form-control" @bind="@selectedUser">
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Fio</option>
                }
            </select>
        </p>
        <p>
            <label class="control-label">ShortDescription</label>
            <input class="form-control" @bind-value="order.ShortDescription" />
        </p>
        <p>
            <label class="control-label">DetailedDescription</label>
            <input class="form-control" @bind-value="order.DetailedDescription" />
        </p>
        <p>
            <lable class="control-label">DateEnd</lable>
            <input class="form-control" @bind-value="order.DateEnd" />
        </p>

        <p>
            <button class="btn btn-success" @onclick="Submit">Сохранить</button>
        </p>
    </div>
</table>

@code {
    private HttpClient httpClient = null;

    private int selectedUser = 1;
    private List<User> users = new List<User>();

    private Order order = new Order();

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7101/api/order");

        await LoadAuthUsers();
    }

    private async Task LoadAuthUsers()
    {
        HttpResponseMessage response = await httpClient.GetAsync("https://localhost:7101/api/account/authUsers");

        string apiResponse = await response.Content.ReadAsStringAsync();

        users = JsonConvert.DeserializeObject<List<User>>(apiResponse);
    }

    private async Task Submit()
    {
        order.UserId = selectedUser;

        HttpResponseMessage response = await httpClient.PostAsJsonAsync($"{httpClient.BaseAddress}", order);
        string apiResponse = await response.Content.ReadAsStringAsync();

        JObject json = JObject.Parse(apiResponse);
        JToken data = json["data"];

        order = data.ToObject<Order>();

        navigationManager.NavigateTo("GetOrders");
    }
}